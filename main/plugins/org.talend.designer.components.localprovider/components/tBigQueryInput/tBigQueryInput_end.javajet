<%@ jet
imports="
        org.talend.core.model.process.INode
        org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.ElementParameterParser
"
%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/Log4jFileUtil.javajet"%>
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String authMode = ElementParameterParser.getValue(node,"__AUTH_MODE__");
    String projectId = ElementParameterParser.getValue(node,"__PROJECT_ID__");
    String resultSizeType = ElementParameterParser.getValue(node,"__RESULT_SIZE__");
    boolean isCustomTemporaryName = ElementParameterParser.getBooleanValue(node,"__USE_CUSTOM_TEMPORARY_DATASET__");
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));

	if (authMode.equals("OAUTH") || authMode.equals("TOKEN")) {
	%>
            }
            pageToken_<%=cid%> = dataList_<%=cid %>.getPageToken();
            if (null == pageToken_<%=cid%>) {
                break;
            }
        }
    }
  	<%
  	} else if (authMode.equals("SERVICEACCOUNT") || authMode.equals("APPLICATION_DEFAULT_CREDENTIALS")) {
  	%>
            }
            if (child_statistics_<%=cid%> != null) {
                globalMap.put("<%=cid%>_STATISTICS_CHILD", child_statistics_<%=cid%>.stream().collect(java.util.stream.Collectors.joining(",", "{\"statistics\": [", "]}")));
            }
        //}
<%
      } else {
          throw new IllegalArgumentException("authentication mode should be either \"SERVICEACCOUNT\", \"APPLICATION_DEFAULT_CREDENTIALS\" or \"OAUTH\" or \"TOKEN\", but it is " + authMode);
      }
      log4jFileUtil.retrievedDataNumberInfo(node);
      // Else job has finished successfully with the results. Finish }.
      %>
}
<%
    if (authMode.equals("OAUTH") || authMode.equals("TOKEN")) {
        %>
        } catch (Exception e_<%=cid%>) {
            String message_<%=cid%> = e_<%=cid%>.getMessage();
            <%
            log4jFileUtil.logErrorMessage();
            %>
            globalMap.put("<%=cid%>_ERROR_MESSAGE", message_<%=cid%>);
            throw e_<%=cid%>;
        } finally {
            bigQueryUtil_<%=cid%>.cleanup();
        }
    <%
    } else {
    %>
        } catch (Exception e_<%=cid%>) {
            String message_<%=cid%> = e_<%=cid%>.getMessage();
            <%
            log4jFileUtil.logErrorMessage();
            %>
            globalMap.put("<%=cid%>_ERROR_MESSAGE", message_<%=cid%>);
            throw e_<%=cid%>;
        } finally {
            serviceAccountBigQueryUtil_<%=cid%>.cleanup();
        }
    <%
    }
    %>
