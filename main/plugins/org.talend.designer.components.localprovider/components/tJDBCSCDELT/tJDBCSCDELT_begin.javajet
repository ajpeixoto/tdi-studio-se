<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.core.model.process.IConnection
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.MetadataTalendType
    org.talend.core.model.metadata.MappingTypeRetriever
    java.util.List
    java.util.Map
    java.util.HashMap
    java.util.ArrayList
    org.talend.commons.utils.StringUtils
" 
skeleton="../templates/db_output_bulk.skeleton"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/DBLogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();

List<IMetadataColumn> columnList = getColumnList(node);

if(columnList == null || columnList.isEmpty()) {
	return "";
}

dbLog = new DBLogUtil(node);

//some global var
boolean isEnableDebug = ("true").equals(ElementParameterParser.getValue(node, "__DEBUG__"));
String dbmsId = ElementParameterParser.getValue(node,"__MAPPING__");
boolean log4jEnabled = ("true").equals(ElementParameterParser.getValue(node, "__LOG4J_ACTIVATE__"));

//get or create db connection statement generation
String useExistingConnection = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
if (("true").equals(useExistingConnection)) {
    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
    String connectionName = "conn_" + connection;
    String username = "username_" + connection;
    %>
    java.sql.Connection conn_<%=cid%> = (java.sql.Connection) globalMap.get("<%=connectionName%>");
    String dbUser_<%=cid %> = (String)globalMap.get("<%=username%>");
    <%
} else {
	String driverClass = ElementParameterParser.getValue(node, "__DRIVER_CLASS__");
	String jdbcURL = ElementParameterParser.getValue(node, "__URL__");
	String dbuser= ElementParameterParser.getValue(node, "__USER__");
    %>
    java.lang.Class.forName(<%=driverClass%>);
    String url_<%=cid%> = <%=jdbcURL %>;
    String dbUser_<%=cid %> = <%=dbuser%>;

    <%
    String passwordFieldName = "__PASS__";
    %>

    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

    String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;

    java.sql.Connection conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid %>, dbUser_<%=cid%>, dbPwd_<%=cid%>);
    <%
}
%>

<%
Manager manager = getManager(dbmsId, cid, node);
%>

String dbschema_<%=cid%> = <%=ElementParameterParser.getValue(node, "__SCHEMA_DB__")%>;
String sourceTable_<%=cid%> = <%=ElementParameterParser.getValue(node, "__TABLE_SRC__")%>;
String tableName_<%=cid%> = <%=ElementParameterParser.getValue(node, "__TABLE__")%>;

<%if("redshift_id".equals(dbmsId)) {%>
String schemaForSearch_<%=cid%> = null;
String tableForSearch_<%=cid%> = tableName_<%=cid%>;
<%}%>

if(dbschema_<%=cid%>!=null && !dbschema_<%=cid%>.trim().isEmpty()) {
    tableName_<%=cid%> = dbschema_<%=cid%> + "<%=manager.getRProtectedChar()%>.<%=manager.getLProtectedChar()%>" + tableName_<%=cid%>;
    sourceTable_<%=cid%> = dbschema_<%=cid%> + "<%=manager.getRProtectedChar()%>.<%=manager.getLProtectedChar()%>" + sourceTable_<%=cid%>;
    
    <%if("redshift_id".equals(dbmsId)) {%>
    schemaForSearch_<%=cid%> = dbschema_<%=cid%>;
    <%}%>
}

<%
//table action statement generation
String tableAction = ElementParameterParser.getValue(node, "__TABLE_ACTION__");
String table = ElementParameterParser.getValue(node, "__TABLE__");

String surrogateKey = ElementParameterParser.getValue(node,"__SURROGATE_KEY__");

//not mean we support hive database here, we support databricks delta lake by hive mapping
boolean databricks_delta_lake = "hive_id".equals(dbmsId)||"databricks_delta_lake_id".equals(dbmsId);

String surrogateKeyType = ElementParameterParser.getValue(node,"__SK_CREATION__");
boolean autoIncrease = "AUTO_INCREMENT".equals(surrogateKeyType)&&surrogateKey!=null&&!databricks_delta_lake;

List<Column> stmtStructure = null;
if(autoIncrease) {
	stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, false, null, null, true, surrogateKey, 1, 1);
} else {
	stmtStructure = getManager(dbmsId, cid).createColumnList(columnList, false, null, null);
}

boolean isDynamic = false;
%>

<%if(!databricks_delta_lake) {%>
	<%if("TRUNCATE".equals(tableAction)) {
	%>
	int deletedCount_<%=cid%> = 0;
	<%
	}%>
	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/_tableActionForOutput.javajet"%>
	<%
	if(isEnableDebug) {
	    %>
	    System.out.println("[<%=cid%>] table action <%=tableAction%> done\n");
	    <%
	}
}
%>

<%
class TextUtil {
	Manager manager;
	
	TextUtil(Manager manager) {
		this.manager = manager;
	}
	
	String wrap(String objectName) {
		return manager.getLProtectedChar() + objectName + manager.getRProtectedChar();
	}
	
	String wrap(String var, String cid) {
		return manager.getLProtectedChar() + "\" + " + var + "_" + cid + " + \"" + manager.getRProtectedChar();
	}
}

TextUtil text_util = new TextUtil(manager);
%>

<%if("DB_SEQUENCE".equals(surrogateKeyType) && !databricks_delta_lake) {%>
String sequence_<%=cid%> = <%=ElementParameterParser.getValue(node,"__SK_DB_SEQUENCE__")%>;
    <%if("snowflake_id".equals(dbmsId)) {%>
    String sequenceValueFetchPattern_<%=cid%>;
    if(dbschema_<%=cid%>!=null && !dbschema_<%=cid%>.trim().isEmpty()) {
        sequenceValueFetchPattern_<%=cid%> = dbschema_<%=cid%> + "." + sequence_<%=cid%>+".nextval ";
        //snowflake is not case sensitive, so no need to consider the quoter here.
    }else{
        sequenceValueFetchPattern_<%=cid%> = sequence_<%=cid%>+".nextval ";
    }
    <%}else{%>
String sequenceValueFetchPattern_<%=cid%> = "NEXT VALUE FOR <%=text_util.wrap("sequence", cid)%>";
    <%}%>
<%}%>
<%
boolean isEnableType0 = ("true").equals(ElementParameterParser.getValue(node, "__USE_L0__"));
List<Map<String, String>> type0Attributes = new ArrayList<Map<String, String>>();
if(isEnableType0) {
    type0Attributes = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__L0_FIELDS__");
}

boolean isEnableType1 = ("true").equals(ElementParameterParser.getValue(node, "__USE_L1__"));
List<Map<String, String>> type1Attributes = new ArrayList<Map<String, String>>();
if(isEnableType1) {
    type1Attributes = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__L1_FIELDS__");
}
boolean isEnableType2 = ("true").equals(ElementParameterParser.getValue(node, "__USE_L2__"));
List<Map<String, String>> type2Attributes = new ArrayList<Map<String, String>>();
if(isEnableType2) {
    type2Attributes = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__L2_FIELDS__");
}
List<Map<String, String>> sourceKeys = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__SOURCE_KEYS__");
boolean isEqualWithSK = false;
for(Map<String, String> sk : sourceKeys) {
    if(surrogateKey.equals(sk.get("NAME"))) {
        isEqualWithSK = true;
        break;
    }
}
boolean isFieldValueIncNull = ("true").equals(ElementParameterParser.getValue(node, "__FIELD_VALUE_INC_NULL__"));
List<String> joinClause = new ArrayList<String>();
String strFieldName = "";
String selectColumnString = "";
String columnNameString = "";
boolean useSequence = "DB_SEQUENCE".equals(surrogateKeyType);
String sequenceName = ElementParameterParser.getValue(node,"__SK_DB_SEQUENCE__");
String startDateField = ElementParameterParser.getValue(node,"__L2_STARTDATE_FIELD__");
String endDateField = ElementParameterParser.getValue(node,"__L2_ENDDATE_FIELD__");
String l2EndDateFieldType = ElementParameterParser.getValue(node,"__L2_ENDDATE_FIELD_TYPE__");
String l2EndDateFieldFixedDateValue = ElementParameterParser.getValue(node,"__FIXED_DATE_VALUE__");
boolean isEnableActive = ("true").equals(ElementParameterParser.getValue(node,"__USE_L2_ACTIVE__"));
String activeField = ElementParameterParser.getValue(node,"__L2_ACTIVE_FIELD__");
boolean isEnableVersion = ("true").equals(ElementParameterParser.getValue(node,"__USE_L2_VERSION__"));
String versionField = ElementParameterParser.getValue(node,"__L2_VERSION_FIELD__");
%>
<%if("mysql_id".equals(dbmsId) || "singlestore_id".equals(dbmsId)) {%>
	<%@ include file="./mysql.javajet"%>
<%} else if("oracle_id".equals(dbmsId)){%>
	<%@ include file="./oracle.javajet"%>
<%} else if("teradata_id".equals(dbmsId)){%>
	<%@ include file="./teradata.javajet"%>
<%} else if("ibmdb2_id".equals(dbmsId)){%>
	<%@ include file="./db2.javajet"%>
<%} else if("postgres_id".equals(dbmsId)){%>
	<%@ include file="./postgres.javajet"%>
<%} else if("sybase_id".equals(dbmsId)){%>
	<%@ include file="./sybase.javajet"%>
<%} else if("redshift_id".equals(dbmsId)){%>
	<%@ include file="./common_scd_pattern1.javajet"%>
<%} else if("netezza_id".equals(dbmsId)||"snowflake_id".equals(dbmsId)){%>
	<%@ include file="./common_scd_pattern2.javajet"%>
<%} else if("vertica_id".equals(dbmsId)){%>
	<%@ include file="./vertica.javajet"%>
<%} else if("saphana_id".equals(dbmsId)){%>
    <%@ include file="./sap_hana.javajet"%>
<%} else if(databricks_delta_lake){%>
    <%@ include file="./databricks_delta_lake.javajet"%>
<%} else {%>
	<%@ include file="./common_scd_pattern1.javajet"%>
<%}%>